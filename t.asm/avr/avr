#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

# -------------------------------
# ADD instruction
NAME="AVR: [ADD]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 480f
pi 1
'
EXPECT='add r20, r24
'
run_test

# -------------------------------
# ADC instruction
NAME="AVR: [ADC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 591f
pi 1
'
EXPECT='adc r21, r25
'
run_test

# -------------------------------
# ADIW instruction
NAME="AVR: [ADIW]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0196
pi 1
'
EXPECT='adiw r24, 0x01
'
run_test

# -------------------------------
# ANDI instruction
NAME="AVR: [ANDI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8f7e
pi 1
'
EXPECT='andi r24, 0xef
'
run_test

# -------------------------------
# BLD instruction
NAME="AVR: [BLD]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx e1f8
pi 1
'
EXPECT='bld r14, 1
'
run_test

# -------------------------------
# BRBC instruction
NAME="AVR: [BRBC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 08f4 @ 0
wx 09f4 @ 2
wx 0af4 @ 4
wx 0bf4 @ 6
wx 0cf4 @ 8
wx 0df4 @ 0xa
wx 0ef4 @ 0xc
wx 0ff4 @ 0xe 
pi 8
'
EXPECT='brcc 0x4
brne 0x6
brpl 0x8
brvc 0xa
brge 0xc
brhc 0xe
brtc 0x10
brid 0x12
'
run_test

# -------------------------------
# BRBS instruction
NAME="AVR: [BRBS]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 08f0 @ 0
wx 09f0 @ 2
wx 0af0 @ 4
wx 0bf0 @ 6
wx 0cf0 @ 8
wx 0df0 @ 0xa
wx 0ef0 @ 0xc
wx 0ff0 @ 0xe 
pi 8
'
EXPECT='brcs 0x4
breq 0x6
brmi 0x8
brvs 0xa
brlt 0xc
brhs 0xe
brts 0x10
brie 0x12
'
run_test

# -------------------------------
# CLI instruction
NAME="AVR: [CLI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx f894
pi 1
'
EXPECT='cli 
'
run_test

# -------------------------------
# CLR instruction
NAME="AVR: [CLR]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx ff24
pi 1
'
EXPECT='clr r15
'
run_test

# -------------------------------
# CALL instruction
NAME="AVR: [CALL]"
FILE=malloc://4096
CMDS='
e asm.arch=avr
wx 0e940b10 @ 0x2d1
s 0x2d1
pi 1
'
EXPECT='call 0x2016
'
run_test

NAME="AVR: [CALL] (2)"
FILE=malloc://4096
CMDS='
e asm.arch=avr
wx 0e940b00 @ 0x2d1
s 0x2d1
pi 1
'
EXPECT='call 0x16
'
run_test

NAME="AVR: [CALL] (ANAL)"
FILE=malloc://4096
CMDS='
e asm.arch=avr
wx 0e940b10 @ 0x2d1
s 0x2d1
ao 1~jump[1]
'
EXPECT='0x00002016
'
run_test

NAME="AVR: [CALL] - jump check"
FILE=malloc://4096
CMDS='
e asm.arch=avr
s 0x2d1
wx 0e940b10
ao 1~jump
'
EXPECT='jump: 0x00002016
'
run_test

# -------------------------------
# COM instruction
NAME="AVR: [COM]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8095
pi 1
'
EXPECT='com r24
'
run_test

# -------------------------------
# CP instruction
NAME="AVR: [CP]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 2817
pi 1
'
EXPECT='cp r18, r24
'
run_test

# -------------------------------
# CPI instruction
NAME="AVR: [CPI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 853f
pi 1
'
EXPECT='cpi r24, 0xf5
'
run_test

# -------------------------------
# CPC instruction
NAME="AVR: [CPC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 9207
pi 1
'
EXPECT='cpc r25, r18
'
run_test

# -------------------------------
# DEC instruction
NAME="AVR: [DEC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0a94
pi 1
'
EXPECT='dec r0
'
run_test

# -------------------------------
# EOR instruction
NAME="AVR: [EOR]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8927
pi 1
'
EXPECT='eor r24, r25
'
run_test

# -------------------------------
# ELPM instruction
NAME="AVR: [ELPM]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0790
pi 1
'
EXPECT='elpm r0, Z+
'
run_test

# -------------------------------
# IN instruction
NAME="AVR: [IN]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx cdb7
pi 1
'
# TODO: should be in r28, spl
EXPECT='in r28, 0x3d
'
run_test

# -------------------------------
# INC instruction
NAME="AVR: [INC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx e394
pi 1
'
EXPECT='inc r14
'
run_test

# -------------------------------
# JMP instruction
NAME="AVR: [JMP]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0c942301
pi 1
'
EXPECT='jmp 0x246
'
run_test

NAME="AVR: [JMP] (long address(1))"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0d942301
pi 1
'
EXPECT='jmp 0x20246
'
run_test

NAME="AVR: [JMP] (long address(2))"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx bc942301
pi 1
'
EXPECT='jmp 0x2c0246
'
run_test

NAME="AVR: [JMP] (long address(3))"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0c952301
pi 1
'
EXPECT='jmp 0x400246
'
run_test

# -------------------------------
# LD instruction
NAME="AVR: [LD]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8081
pi 1
'
EXPECT='ld r24, Z
'
run_test

# -------------------------------
# LDI instruction
NAME="AVR: [LDI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 97e0
pi 1
'
EXPECT='ldi r25, 0x07
'
run_test

# -------------------------------
# LDD instruction
NAME="AVR: [LDD]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 9180
pi 1
'
EXPECT='ldd r9, Z+1
'
run_test

# -------------------------------
# LDS instruction
NAME="AVR: [LDS]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 80910201
pi 1
'
EXPECT='lds r24, 0x102
'
run_test

# -------------------------------
# LSL instruction
NAME="AVR: [LSL]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 880f
pi 1
'
EXPECT='lsl r24
'
run_test

# -------------------------------
# MOV instruction
NAME="AVR: [MOV]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0f2e
pi 1
'
EXPECT='mov r0, r31
'
run_test

# -------------------------------
# MOVW instruction
NAME="AVR: [MOVW]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx b901
pi 1
'
EXPECT='movw r22, r18
'
run_test

# -------------------------------
# ORI instruction
NAME="AVR: [ORI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8160
pi 1
'
EXPECT='ori r24, 0x01
'
run_test

# -------------------------------
# OUT instruction
NAME="AVR: [OUT]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 9ebf
pi 1
'
# TODO: should be out sph, r25
EXPECT='out 0x3e, r25
'
run_test

# -------------------------------
# PUSH instruction
NAME="AVR: [PUSH]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx df93
pi 1
'
EXPECT='push r29
'
run_test

# -------------------------------
# RCALL instruction
NAME="AVR: [RCALL]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 01d0
pi 1
'
EXPECT='rcall 0x4
'
run_test

# -------------------------------
# RJMP instruction
NAME="AVR: [RJMP]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 01c0
pi 1
'
EXPECT='rjmp 0x4
'
run_test

# -------------------------------
# POP instruction
NAME="AVR: [POP]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx cf91
pi 1
'
EXPECT='pop r28
'
run_test

# -------------------------------
# RET instruction
NAME="AVR: [RET]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0895
pi 1
'
EXPECT='ret 
'
run_test

# -------------------------------
# RETI instruction
NAME="AVR: [RETI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 1895
pi 1
'
EXPECT='reti 
'
run_test

# -------------------------------
# ROL instruction
NAME="AVR: [ROL]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 991f
pi 1
'
EXPECT='rol r25
'
run_test

# -------------------------------
# PUSH instruction
NAME="AVR: [SBC]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 390b
pi 1
'
EXPECT='sbc r19, r25
'
run_test

# -------------------------------
# SBCI instruction
NAME="AVR: [SBCI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 3f4f
pi 1
'
EXPECT='sbci r19, 0xff
'
run_test

# -------------------------------
# SBIW instruction
NAME="AVR: [SBIW]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 0197
pi 1
'
EXPECT='sbiw r24, 0x01
'
run_test

# -------------------------------
# SEI instruction
NAME="AVR: [SEI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 7894
pi 1
'
EXPECT='sei 
'
run_test

# -------------------------------
# SER instruction
NAME="AVR: [SER]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8fef
pi 1
'
EXPECT='ser r24
'
run_test

# -------------------------------
# SET instruction
NAME="AVR: [SET]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 6894
pi 1
'
EXPECT='set 
'
run_test

# -------------------------------
# ST instruction
NAME="AVR: [ST]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 1082
pi 1
'
EXPECT='st Z, r1
'
run_test

# -------------------------------
# STD instruction
NAME="AVR: [STD]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 1182
pi 1
'
EXPECT='std Z+1, r1
'
run_test

# -------------------------------
# STS instruction
NAME="AVR: [STS]"
FILE=malloc://4096
CMDS='
e asm.arch=avr
s 0x2d1
wx 9093c007
pi 1
'
EXPECT='sts 0x7c0, r25
'
run_test

NAME="AVR: [STS] - jump check"
FILE=malloc://4096
CMDS='
e asm.arch=avr
s 0x2d1
wx 9093c007
ao 1~jump
'
EXPECT='jump: 0x00000000
'
run_test

# -------------------------------
# SUB instruction
NAME="AVR: [SUB]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 281b
pi 1
'
EXPECT='sub r18, r24
'
run_test

# -------------------------------
# SUBI instruction
NAME="AVR: [SUBI]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 2f5f
pi 1
'
EXPECT='subi r18, 0xff
'
run_test

# -------------------------------
# TST instruction
NAME="AVR: [TST]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 8823
pi 1
'
EXPECT='tst r24
'
run_test


NAME='avr disasm negative baddr'
BROKEN=1
FILE=../../bins/elf/bugurtos-avr.elf
ARGS=
CMDS='s 0x506
pd 2~!1
s+2
pd 1
'
EXPECT='call 0x18CE
call 0x18CE
'
run_test


NAME="avr empty disasm"
BROKEN=1
FILE=-
ARGS=
CMDS='e asm.arch=avr
e asm.bits=8
pad 0e94
'
EXPECT='invalid
'
run_test

NAME="avr opcode size"
FILE=-
ARGS=
CMDS='e asm.arch=avr
wx 0e941122
ao~size[1]
'
EXPECT='4
'
run_test
